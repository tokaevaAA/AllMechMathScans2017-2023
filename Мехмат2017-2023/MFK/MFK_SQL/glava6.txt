Токаева Александра, мехмат, 3 курс, 03.05.20
Дз по главе 6

2)Предложите шаблон поиска в операторе LIKE для выбора из этой таблицы всех пассажиров с фамилиями, состоящими из пяти букв.

demo=# select passenger_name  from bookings.tickets where passenger_name like '% _____';

Получим:

ILYA POPOV
VLADIMIR POPOV
PAVEL GUSEV
LEONID ORLOV
EVGENIY GUSEV
NIKOLAY FOMIN
EKATERINA ILINA ...

7)Самые крупные самолеты в нашей авиакомпании — это Boeing 777-300. Выяс- нить, между какими парами городов они летают, поможет запрос:


demo=# select distinct departure_city, arrival_city    from routes r                                                                   where r.aircraft_code = '773'; 


Получим:

 departure_city | arrival_city 
----------------+--------------
 Сочи           | Москва
 Пермь          | Москва
 Москва         | Сочи
 Москва         | Пермь
 Москва         | Новосибирск
 Москва         | Екатеринбург
 Новосибирск    | Москва
 Екатеринбург   | Москва
(8 rows)



К сожалению, в этой выборке информация дублируется. Пары городов приведе- ны по два раза: для рейса «туда» и для рейса «обратно». Модифицируйте запрос таким образом, чтобы каждая пара городов была выведена только один раз.

Решение :

 присвоим городам номера и будем выводить только те пары, где номер первого города меньше номера второго:

demo=# select distinct r.departure_city,dep_a.rk, r.arrival_city,arr_a.rk       from routes r left outer join (select  distinct city, rank()  over ( partition by timezone order by city) as rk from airports) as dep_a on dep_a.city=r.departure_city left outer join (select  distinct city, rank()  over ( partition by timezone order by city) as rk from airports) as arr_a on arr_a.city=r.arrival_city   where r.aircraft_code = '773' and dep_a.rk <  arr_a.rk ;     

Получим то, что надо:

 departure_city | rk | arrival_city | rk 
----------------+----+--------------+----
 Сочи           |  1 | Москва       | 13
 Пермь          |  5 | Москва       | 13
 Москва         | 13 | Екатеринбург | 20
 Новосибирск    |  1 | Москва       | 13
(4 rows)



9)Для ответа на вопрос, сколько рейсов выполняется из Москвы в Санкт-Петер- бург, можно написать совсем простой запрос:
SELECT count( * )
FROM routes
WHERE departure_city = 'Москва'
AND arrival_city = 'Санкт-Петербург';

count -------
12
(1 строка)


А с помощью какого запроса можно получить результат в таком виде?
departure_city | arrival_city | count
 ----------------+-----------------+------- 
Москва | Санкт-Петербург | 12
(1 строка)




Решение:

demo=# select departure_city,arrival_city, count(*) from routes group by  departure_city,arrival_city  having departure_city='Москва' and arrival_city='Санкт-Петербург';
 departure_city |  arrival_city   | count 
----------------+-----------------+-------
 Москва         | Санкт-Петербург |    12
(1 row)



13)
Ответить на вопрос о том, каковы максимальные и минимальные цены билетов на все направления, может такой запрос:
SELECT f.departure_city, f.arrival_city, max( tf.amount ), min( tf.amount )
FROM flights_v f
JOIN ticket_flights tf ON f.flight_id = tf.flight_id GROUP BY 1, 2
ORDER BY 1, 2;



А как выявить те направления, на которые не было продано ни одного билета? Один из вариантов решения такой: если на рейсы, отправляющиеся по какому- то направлению, не было продано ни одного билета, то максимальная и мини- мальная цены будут равны NULL. Нужно получить выборку в таком виде:
Модифицируйте запрос, приведенный выше.

Решение:


demo=# SELECT f.departure_city, f.arrival_city, max( tf.amount )  , min( tf.amount ) FROM flights_v f                                                           full outer JOIN ticket_flights tf ON f.flight_id = tf.flight_id GROUP BY 1, 2    having max(tf.amount) is NULL  ORDER BY 1, 2 ;

Получим:


Орск            | Ханты-Мансийск  |     |    
 Орск            | Курган          |     |    
 Орск            | Москва          |     |    
 Орск            | Ульяновск       |     |    
 Сочи            | Пенза           |     |    
 Сочи            | Иваново         |     |    
 Сочи            | Ярославль       |     |    .......





19) Добавим в таблицу номер текущей итерации:

demo=# WITH RECURSIVE ranges ( min_sum, max_sum,tek_iteration ) AS (                     VALUES( 0,      100000,1 ),                                                           ( 100000, 200000,1 ),                                                           ( 200000, 300000,1 )                                                      UNION ALL                                                              SELECT min_sum + 100000, max_sum + 100000, tek_iteration+1                      FROM ranges                                                                     WHERE max_sum < ( SELECT max( total_amount ) FROM bookings )                       )                                                                            SELECT * FROM ranges;
 min_sum | max_sum | tek_iteration 
---------+---------+---------------
       0 |  100000 |             1
  100000 |  200000 |             1
  200000 |  300000 |             1
  100000 |  200000 |             2
  200000 |  300000 |             2
  300000 |  400000 |             2
  200000 |  300000 |             3
  300000 |  400000 |             3
  400000 |  500000 |             3
  300000 |  400000 |             4
  400000 |  500000 |             4
  500000 |  600000 |             4
  400000 |  500000 |             5
  500000 |  600000 |             5
  600000 |  700000 |             5
  500000 |  600000 |             6
  600000 |  700000 |             6
  700000 |  800000 |             6
  600000 |  700000 |             7
  700000 |  800000 |             7
  800000 |  900000 |             7
  700000 |  800000 |             8
  800000 |  900000 |             8
  900000 | 1000000 |             8
  800000 |  900000 |             9
  900000 | 1000000 |             9
 1000000 | 1100000 |             9
  900000 | 1000000 |            10
 1000000 | 1100000 |            10
 1100000 | 1200000 |            10
 1000000 | 1100000 |            11
 1100000 | 1200000 |            11
 1200000 | 1300000 |            11
 1100000 | 1200000 |            12
 1200000 | 1300000 |            12
 1200000 | 1300000 |            13
(36 rows)


Если заменить UNION ALL на UNION в исходном запросе, то строк станет меньше, потому что уберутся повторяющиеся строки:


demo=# WITH RECURSIVE ranges ( min_sum, max_sum ) AS (                                   VALUES( 0,      100000 ),                                                             ( 100000, 200000 ),                                                             ( 200000, 300000 )                                                        UNION                                                                  SELECT min_sum + 100000, max_sum + 100000                                       FROM ranges                                                                     WHERE max_sum < ( SELECT max( total_amount ) FROM bookings )                       )                                                                            SELECT * FROM ranges;
 min_sum | max_sum 
---------+---------
       0 |  100000
  100000 |  200000
  200000 |  300000
  300000 |  400000
  400000 |  500000
  500000 |  600000
  600000 |  700000
  700000 |  800000
  800000 |  900000
  900000 | 1000000
 1000000 | 1100000
 1100000 | 1200000
 1200000 | 1300000
(13 rows)



А если заменить UNION ALL на UNION в новом запросе, то строк не станет меньше, потому что у строк с одинаковыми двумя первыми значениями будет разным значение tek_iteration :


demo=# WITH RECURSIVE ranges ( min_sum, max_sum,tek_iteration ) AS (                     VALUES( 0,      100000,1 ),                                                           ( 100000, 200000,1 ),                                                           ( 200000, 300000,1 )                                                      UNION                                                                  SELECT min_sum + 100000, max_sum + 100000, tek_iteration+1                      FROM ranges                                                                     WHERE max_sum < ( SELECT max( total_amount ) FROM bookings )                       )                                                                            SELECT * FROM ranges;
 min_sum | max_sum | tek_iteration 
---------+---------+---------------
       0 |  100000 |             1
  100000 |  200000 |             1
  200000 |  300000 |             1
  100000 |  200000 |             2
  200000 |  300000 |             2
  300000 |  400000 |             2
  200000 |  300000 |             3
  300000 |  400000 |             3
  400000 |  500000 |             3
  300000 |  400000 |             4
  400000 |  500000 |             4
  500000 |  600000 |             4
  400000 |  500000 |             5
  500000 |  600000 |             5
  600000 |  700000 |             5
  500000 |  600000 |             6
  600000 |  700000 |             6
  700000 |  800000 |             6
  600000 |  700000 |             7
  700000 |  800000 |             7
  800000 |  900000 |             7
  700000 |  800000 |             8
  800000 |  900000 |             8
  900000 | 1000000 |             8
  800000 |  900000 |             9
  900000 | 1000000 |             9
 1000000 | 1100000 |             9
  900000 | 1000000 |            10
 1000000 | 1100000 |            10
 1100000 | 1200000 |            10
 1000000 | 1100000 |            11
 1100000 | 1200000 |            11
 1200000 | 1300000 |            11
 1100000 | 1200000 |            12
 1200000 | 1300000 |            12
 1200000 | 1300000 |            13
(36 rows)


21)В тексте главы был приведен запрос, выводящий список городов, в которые нет рейсов из Москвы.


demo=# SELECT DISTINCT a.city FROM airports a WHERE NOT EXISTS (
demo(# SELECT * FROM routes r
demo(# WHERE r.departure_city = 'Москва'
demo(# AND r.arrival_city = a.city )
demo-# AND a.city <> 'Москва' ORDER BY city;
         city         
----------------------
 Ухта
 Чита
 Усть-Кут
 Усть-Илимск
 Кызыл
 Калуга
 Сургут
 Якутск
 Иваново
 Иркутск
 Когалым
 Магадан
 Удачный
 Стрежевой
 Череповец
 Ярославль
 Нижнекамск
 Новокузнецк
 Комсомольск-на-Амуре
 Благовещенск
(20 rows)

Можно предложить другой вариант, в котором используется одна из операций над множествами строк: объединение, пересечение или разность.
Вместо знака «?» поставьте в приведенном ниже запросе нужное ключевое сло- во — UNION, INTERSECT или EXCEPT — и обоснуйте ваше решение.

Ответ: Нужно вставить EXCEPT, потому что это соответствует нашей логике, согласно которой сы из всех городов выкидываем те, в которые есть рейсы из Москвы;

demo=# select city from airports where city <>'Москва' EXCEPT select arrival_city from routes where departure_city = 'Москва' order by city;
         city         
----------------------
 Ухта
 Чита
 Усть-Кут
 Усть-Илимск
 Кызыл
 Калуга
 Сургут
 Якутск
 Иваново
 Иркутск
 Когалым
 Магадан
 Удачный
 Стрежевой
 Череповец
 Ярославль
 Нижнекамск
 Новокузнецк
 Комсомольск-на-Амуре
 Благовещенск
(20 rows)


23)Предположим, что департамент развития нашей авиакомпании задался вопро- сом: каким будет общее число различных маршрутов, которые теоретически можно проложить между всеми городами?
Если в каком-то городе имеется более одного аэропорта, то это учитывать не будем, т. е. маршрутом будем считать путь между городами, а не между аэро- портами. Здесь мы используем соединение таблицы с самой собой на основе неравенства значений атрибутов.


demo=# select count(*) from (select distinct city from airports) as a1 join (select distinct city from airports) as a2 on a1.city <> a2.city;
 count 
-------
 10100
(1 row)

Задание. Перепишите этот запрос с общим табличным выражением.

demo=# with a1 as (select distinct city from airports)  select count(*) from a1 join (select distinct city from airports) as a2 on a1.city <> a2.city;
 count 
-------
 10100
(1 row)





