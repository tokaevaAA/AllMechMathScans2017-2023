Токаева Александра, мехмат, 3 курс, 22.04.20
Дз по главе 5

2) Посмотрите, какие ограничения уже наложены на атрибуты таблиц «Успеваемость» (progress). Воспользуйтесь командой \d утилиты psql. А теперь предложите для этой таблицы ограничение уровня таблицы.

Сначала создадим таблицы student и  progress:


CREATE TABLE students
( record_book numeric( 5 ) NOT NULL,
name text NOT NULL,
doc_ser numeric( 4 ), doc_num numeric( 6 ), PRIMARY KEY ( record_book )
);


CREATE TABLE progress
( record_book numeric( 5 ) NOT NULL,
subject text NOT NULL,
acad_year text NOT NULL,
term numeric( 1 ) NOT NULL CHECK ( term = 1 OR term = 2 ), mark numeric( 1 ) NOT NULL CHECK ( mark >= 3 AND mark <= 5 )
DEFAULT 5,
FOREIGN KEY ( record_book )
REFERENCES students ( record_book ) ON DELETE CASCADE
ON UPDATE CASCADE
);



Теперь  посмотрим на progress:
aleksandra=# \d progress                                                                           Table "public.progress"
   Column    |     Type     | Collation | Nullable | Default 
-------------+--------------+-----------+----------+---------
 record_book | numeric(5,0) |           | not null | 
 subject     | text         |           | not null | 
 acad_year   | text         |           | not null | 
 term        | numeric(1,0) |           | not null | 
 mark        | numeric(1,0) |           | not null | 5
Check constraints:
    "progress_mark_check" CHECK (mark >= 3::numeric AND mark <= 5::numeric)
    "progress_term_check" CHECK (term = 1::numeric OR term = 2::numeric)
Foreign-key constraints:
    "progress_record_book_fkey" FOREIGN KEY (record_book) REFERENCES students(record_book) ON UPDATE CASCADE ON DELETE CASCADE


Видим, что есть 2 ограничения: 3<=mark<=5 и term=1 или 2;


Просто так добавить в progress нельзя:
INSERT INTO progress VALUES (5555,'Физика','2016/2017','1');
ERROR:  insert or update on table "progress" violates foreign key constraint "progress_record_book_fkey"
DETAIL:  Key (record_book)=(5555) is not present in table "students".

надо сначала человека добавить в students:
aleksandra=# INSERT INTO students VALUES ('55555','Иванов','4444','666666');
INSERT 0 1

а потом в progress:
INSERT INTO progress VALUES (55555,'Физика','2016/2017','1');
INSERT 0 1


Смотрим на progress:

aleksandra=# SELECT * FROM progress;
 record_book | subject | acad_year | term | mark 
-------------+---------+-----------+------+------
       55555 | Физика  | 2016/2017 |    1 |    5
(1 row)




Добавляем новое ограничение в progress:



Получаем ошибку:
ERROR:  column "test_form" does not exist


Надо сначала добавить столбец test_form:
aleksandra=# ALTER TABLE progress ADD COLUMN test_form text;
ALTER TABLE


Снова смотрим на progress и видим, что новый столбец у уже имеющихся строк  пустой:

aleksandra=# SELECT * FROM progress;
 record_book | subject | acad_year | term | mark | test_form 
-------------+---------+-----------+------+------+-----------
       55555 | Физика  | 2016/2017 |    1 |    5 | 
(1 row)


Теперь добавим новое ограничение:

aleksandra=# ALTER TABLE progress
aleksandra-#      ADD CHECK (
aleksandra(# ( test_form = 'экзамен' AND mark IN ( 3, 4, 5 ) ) OR
aleksandra(# ( test_form = 'зачет' AND mark IN ( 0, 1 ) )
aleksandra(# );
ALTER TABLE

Теперь строки с test_form='экзамен' добавляются нормально:

INSERT INTO progress VALUES (55555,'Математика','2016/2017','1','5','экзамен');
INSERT 0 1

А строки с test_form='зачет'  не добавляются, потому что у них mark= 0 или 1, а у нас ограничение progress_mark_check: 3<=mark<=5:



aleksandra=# INSERT INTO progress VALUES (55555,'Математика','2016/2017','1','1','зачет');
ERROR:  new row for relation "progress" violates check constraint "progress_mark_check"
DETAIL:  Failing row contains (55555, Математика, 2016/2017, 1, 1, зачет).

Сбросим старое ограничение:

aleksandra=# ALTER TABLE progress  DROP CONSTRAINT progress_mark_check;
ALTER TABLE

И сделаем новое:
aleksandra=# ALTER TABLE progress ADD CHECK ((test_form='зачет' AND mark >= 0 AND mark <= 1 ) OR (test_form='экзамен' AND mark >= 3 AND mark <= 5));
ALTER TABLE

Теперь с зачетом тоже нет проблем:

aleksandra=#  INSERT INTO progress VALUES (55555,'Математика','2016/2017','1','1','зачет');
INSERT 0 1



9) Пока в таблицу student можно вставить строку с именем '':

INSERT INTO students ( record_book, name, doc_ser, doc_num ) VALUES ( 12300, '', 0402, 543281 );
INSERT 0 1

Удалим эту строку и наложим новое ограничение:

aleksandra=# delete from students where name='';
DELETE 1
aleksandra=# 
aleksandra=# ALTER TABLE students ADD CHECK ( name <> '' );
ALTER TABLE


Теперь пустую строку в качестве имени вставит нельзя:

aleksandra=# INSERT INTO students ( record_book, name, doc_ser, doc_num ) VALUES ( 12300, '', 0402, 543281 );
ERROR:  new row for relation "students" violates check constraint "students_name_check"
DETAIL:  Failing row contains (12300, , 402, 543281).
aleksandra=# 



Зато можно вставить строку с именем, состоящим только из пробелов:

aleksandra=# INSERT INTO students VALUES ( 12346, ' ', 0406, 112233 );
INSERT 0 1
aleksandra=# INSERT INTO students VALUES ( 12347, '  ', 0407, 112234 );
INSERT 0 1


У строк из пробелов непутевая длина:

aleksandra=# SELECT *, length( name ) FROM students;
 record_book |  name  | doc_ser | doc_num | length 
-------------+--------+---------+---------+--------
       55555 | Иванов |    4444 |  666666 |      6
       12346 |        |     406 |  112233 |      1
       12347 |        |     407 |  112234 |      2
(3 rows)


Зато функция trim обрезает у строки пробелы, поэтому length(trim(name)) будет ненулевой только у нормальных строк:

aleksandra=# select length(trim(name)) from students;
 length 
--------
      6
      0
      0
(3 rows)


Поэтому удалим старое ограничение:
aleksandra=# alter table students drop constraint students_name_check;
ALTER TABLE

Добавим новое ограничение:

aleksandra=# alter table students add check(length(trim(name)) <> 0);
ERROR:  check constraint "students_name_check" is violated by some row

Получаем ошибку, потому что мы еще не удалили из таблицы строки с пустыми именами:

aleksandra=# delete from students where length(trim(name)) = 0;
DELETE 2

Теперь добавим новое ограничение:

aleksandra=# alter table students add check(length(trim(name)) <> 0); 
ALTER TABLE


Теперь строку с пустым именем нельзя добавить:

aleksandra=# INSERT INTO students VALUES ( 12347, '  ', 0407, 112234 );
ERROR:  new row for relation "students" violates check constraint "students_name_check"
DETAIL:  Failing row contains (12347,   , 407, 112234).
aleksandra=# 



17) Я думаю, что чаще нужны горизонтальные представления: потому что человеку нужен конкретный объект ( рейс, самолет, аэропорт) и вся доступная информация по нему, а не все доступные объекты. Например, человеку, вылетающему из Москвы,  могут быть интересны все рейсы, вылетающие из Москвы:

demo=# create view flights_from_msk as 
select * from flights  where departure_airport = 'DME' or  departure_airport = 'VKO'  or departure_airport = 'SVO';


18) Добавим в таблицу bookings поле  people_info типа jsonb, которые будет содержать количество детей и взрослых, зарегистрированных по этому электронному билету.

demo=# alter table bookings add column people_info jsonb;
ALTER TABLE

Добавим туда запись:
demo=# update bookings set people_info = '{ "children":1,"grown_up":1}'::jsonb where book_ref = '00000F';
UPDATE 1
